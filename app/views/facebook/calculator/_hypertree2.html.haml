#infovis{:style => 'height:350px;'}

:javascript
  var Log = {
      elem: false,
      write: function(text){
      }
  };

  function addEvent(obj, type, fn) {
      if (obj.addEventListener) obj.addEventListener(type, fn, false);
      else obj.attachEvent('on' + type, fn);
  };


  function init_hypertree() {
      //init data
      var json = {
          "id": "#{@facebook_session.user.uid}",
          "name": "You",
          "children": [#{@friends_footprints_json}],
          "data": {
            '$dim' : #{@calculator_result.total_footprint.to_i/1.5},
            '$color' : '#{CalcMath::number_to_intensity(@calculator_result.total_footprint, 0, @max)}'
          }
      };
      //end
      var infovis = document.getElementById('infovis');
      var w = infovis.offsetWidth - 50;
      var h = infovis.offsetHeight - 50;

      //init canvas
      //Create a new canvas instance.
      var canvas = new Canvas('mycanvas', {
          'injectInto': 'infovis',
          'width': w,
          'height': h
      });
      //end
      var style = document.getElementById('mycanvas').style;
      style.marginLeft = style.marginTop = "25px";
      //init Hypertree
      var rgraph = new RGraph(canvas, {
          clickedNodeId: "",
          clickedNodeName: "",
          
          //Change node and edge styles such as
          //color, width and dimensions.
          
          Node: {
              dim: 10,
              color: "#f00",
              overridable: true
          },

          Edge: {
              lineWidth: 2,
              color: "#088"
          },
          
          //Attach event handlers and add text to the
          //labels. This method is only triggered on label
          //creation
          onCreateLabel: function(domElement, node){
            domElement.innerHTML = node.name;
            addEvent(domElement, 'click', function () {
              rgraph.onClick(node.id);
              
              addEvent(domElement, 'click', function () {
                this.requestGraph(node.id);
              });
            });
          },
          //Change node styles when labels are placed
          //or moved.
          onPlaceLabel: function(domElement, node){
              var style = domElement.style;
              style.display = '';
              style.cursor = 'pointer';
              
              if (node._depth <= 1) {
                  style.fontSize = "0.7em";
                  style.color = "#000000";
              } else if(node._depth == 2){
                  style.fontSize = "0.5em";
                  style.color = "#000000";
              }

              var left = parseInt(style.left);
              var top = parseInt(style.top);
              var w = domElement.offsetWidth;
              style.left = (left - (w / 2)) + 'px';
          },
          
          requestGraph: function(clickedNodeId) {
            var that = this, id = clickedNodeId;
            
            $.getJSON('#{url_for(:controller => 'facebook/calculator', :action => 'hypertree_subtree', :fb_sig_user => @facebook_session.user.uid, :fb_sig_session_key => params[:fb_sig_session_key], :escape => false)}' + '&node=' + id, function(data) {
              rgraph.op.morph(data, {
                'id': id,
                type: 'fade',
                duration:2000,
                hideLabels:true,
                onComplete: function() {
                }
              });
            });
          },
          
          onBeforeCompute: function(node) {
            this.clickedNodeId = node.id;
            this.clickedNodeName = node.name;
          },
          
          onAfterCompute: function(){
            this.requestGraph();
          }
      });

      //load JSON data.
      rgraph.loadJSON(json);
      
      //compute positions and plot.
      rgraph.refresh();
      //end
      
      rgraph.controller.onAfterCompute();
  }
  
  window.onload = function() {
    init_hypertree();
  }